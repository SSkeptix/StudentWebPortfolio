// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentWebPortfolio.Data;

namespace StudentWebPortfolio.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181220104153_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.Portfolio", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("Description")
                        .HasMaxLength(64);

                    b.Property<byte>("English")
                        .HasColumnType("tinyint");

                    b.Property<string>("GitHubUrl")
                        .HasMaxLength(64);

                    b.Property<string>("Group")
                        .HasMaxLength(64);

                    b.HasKey("UserId");

                    b.HasIndex("English")
                        .HasName("IX_English");

                    b.ToTable("Portfolios","dbo");
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.Skill", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<long?>("ValidatedByUserId");

                    b.HasKey("SkillId");

                    b.HasIndex("ValidatedByUserId");

                    b.ToTable("Skills","dbo");
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<long?>("ValidatedByUserId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ValidatedByUserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.UserSkill", b =>
                {
                    b.Property<long>("UserSkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SkillId");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<long>("UserId");

                    b.Property<long?>("ValidatedByUserId");

                    b.HasKey("UserSkillId");

                    b.HasIndex("SkillId")
                        .HasName("IX_SkillId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.HasIndex("ValidatedByUserId");

                    b.ToTable("UserSkills","dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentWebPortfolio.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.Portfolio", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.User", "User")
                        .WithMany("Portfolios")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Portfolios_UserId__dbo.AspNetUsers_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.Skill", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.User", "ValidatedByUser")
                        .WithMany("ValidatedSkills")
                        .HasForeignKey("ValidatedByUserId")
                        .HasConstraintName("FK_dbo.Skills_ValidatedByUserId__dbo.AspNetUsers_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.User", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.User", "ValidatedByUser")
                        .WithMany("ValidatedUsers")
                        .HasForeignKey("ValidatedByUserId")
                        .HasConstraintName("FK_dbo.AspNetUsers_ValidatedByUserId__dbo.AspNetUsers_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentWebPortfolio.Data.Entities.UserSkill", b =>
                {
                    b.HasOne("StudentWebPortfolio.Data.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_dbo.UserSkills_UserId__dbo.Skills_SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudentWebPortfolio.Data.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserSkills_UserId__dbo.AspNetUsers_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudentWebPortfolio.Data.Entities.User", "ValidatedByUser")
                        .WithMany("ValidatedUserSkills")
                        .HasForeignKey("ValidatedByUserId")
                        .HasConstraintName("FK_dbo.UserSkills_ValidatedByUserId__dbo.AspNetUsers_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
